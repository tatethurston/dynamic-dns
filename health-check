#!/usr/bin/env bash

set -euo pipefail
shopt -s nullglob globstar

function main() {
  log "Starting."

  if [ -f .env ]; then
    log "Detected '.env'. Sourcing values."
    source .env
  fi

  URL=http://"$HOSTNAME"
  IP_FILE=ip.txt
  CHECK_INTERVAL=${CHECK_INTERVAL:=60} # seconds
  CHECK_TIMEOUT=${CHECK_TIMEOUT:=0.5}  # seconds
  DNS_TTL=${DNS_TTL:=60}

  while sleep "$CHECK_INTERVAL"; do health_check; done
}

function health_check() {
  if query_host; then
    log "OK"
  else
    log "FAILED. Checking DNS."
    update_dns
  fi
}

function query_host() {
  curl "$URL" --max-time "$CHECK_TIMEOUT" --silent > /dev/null
}

function update_dns() {
  IP=$(external_ip)
  LAST_IP=$(get_ip)
  if [ "$IP" == "$LAST_IP" ]; then
    log "DNS is up to date. IP is $IP."
  else
    log "Updating DNS from $LAST_IP to $IP."

    aws route53 change-resource-record-sets \
      --hosted-zone-id "$HOSTED_ZONE_ID" \
      --change-batch "$(template templates/update-dns.json)"

    set_ip "$IP"

    log "DNS updated from $LAST_IP to $IP."
  fi
}

function set_ip() {
  echo "$1" >| "$IP_FILE"
}

function get_ip() {
  cat "$IP_FILE"
}

function external_ip() {
  dig +short myip.opendns.com @resolver1.opendns.com
}

function template() {
  eval "cat <<EOF
$(< "$1")
EOF
"
}

function log() {
  # ISO-8601 Date
  echo "$(TZ=UTC date +'%Y-%m-%dT%H:%M:%SZ') [Health Check]: $1"
}

main
